---
title: "ST558 Final Project"
author: "Alex Prevatte"
date: "11/26/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# Libraries
library(tidyverse)
library(knitr)
library(GGally)
library(caret)
library(randomForest)
library(doParallel)
library(naniar)
```

Reading in the data

```{r}
# Read in the data file
adultData <- read_delim("adult.data", 
                      delim = ",",
                      col_names = c("Age", "Workclass", "fnlwgt", "Education", "Education Number", "Marital Status", "Occupation", "Relationship", "Race", "Sex", "Capital Gain", "Capital Loss", "Hours per week", "Native Country", "Income"),skip = 1)


#Remove leading spaces from character variables
adultData$Sex <- trimws(adultData$Sex, which = c("left"))
adultData$Workclass <- trimws(adultData$Workclass, which = c("left"))
adultData$Education <- trimws(adultData$Education, which = c("left"))
adultData$`Native Country` <- trimws(adultData$`Native Country`, which = c("left"))
adultData$Income <- trimws(adultData$Income, which = c("left"))

filter(adultData, Sex == "Male" | Sex != "Male") %>% select(c(Age, Workclass))
adultData %>% filter(Sex == "Male" | Sex != input$sexChoice) %>% select(c(input$variableChoice))
adultData$Income
filterData <- adultData %>% filter(Income == "<=50K" & Sex == "Male")
#%>% select(as.vector(input$variableChoice))

newData <- adultData %>% filter(Income == "<=50K" &
                                            Sex == "Male") %>% 
            select(as.vector("Age"))


```

Data Cleaning

```{r}
# Remove variables that are already represented in the data set or those that do not contribute to prediction of the response.

#'fnlwgt' is a population weighting variable that contributes to representing the entire population. This does not have an effect on predicting income level. 

#'education' is already represented by 'education-num' in the dataset, so we can also remove this variable.

# The majority of capital-gain and capital-loss variables are 0. Therefore we should remove these variables since they will not have much of an effect on the prediction.

# Remove 'fnlwgt', 'education', 'capital-gain', and 'capital-loss'
adultData <- select(adultData, -c(fnlwgt, Education, `Capital Gain`, `Capital Loss`))

# Replace '?' entries with 'NA' and drop NA's.
adultData[adultData == " ?"] <- NA
adultData <- na.omit(adultData)

# Convert character variables to factors
adultData$Income <- as.factor(adultData$Income)
adultData$Workclass <- as.factor(adultData$Workclass)
adultData$`Education Number` <- as.numeric(adultData$`Education Number`)
adultData$`Marital Status` <- as.factor(adultData$`Marital Status`)
adultData$Occupation <- as.factor(adultData$Occupation)
adultData$Relationship <- as.factor(adultData$Relationship)
adultData$Race <- as.factor(adultData$Race)
adultData$Sex <- as.factor(adultData$Sex)
adultData$`Hours per week` <- as.numeric(adultData$`Hours per week`)
adultData$`Native Country` <- as.factor(adultData$`Native Country`)
#levels(adultData$income) <- c("0", "1")

# Examine correlation among variables to test for collinearity
```

Data Exploration Page
1. User should create graphical and numeric summaries
2. Change the type of plot and summary reported
3. Change the variables and filter the rows

```{r}
# numeric summaries
summary(adultData)
# count data - should be able to look at the frequency of people in several categories and what their income level should be. This will include a plot of income level and variables that were filtered in a table. Numeric summaries in the table can include averages or medians of like age, hours, etc. 

adultDataSub <- adultData[, c("Income", "Age"),drop = FALSE]
tab <- aggregate(adultDataSub[["Age"]] ~ Income,
                             data = adultDataSub, FUN = c("sd"))
            tab$`adultDataSub[[var]]` <- round(tab$`adultDataSub[[var]]`, 
                                                  digit = var2)
# Barplots
  
# Gender classification and income level
# Race classification and income level
# Occupation classification and income level
# Education classification and income level

# Side by side Boxplots <50k >=50k
  
# Age and income level
# Hours per week and  income level


#Barplot sex
g <- ggplot(data = adultData, aes(x = sex))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
      coord_flip()
#Barplot race
g <- ggplot(data = adultData, aes(x = race))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
      coord_flip()
#Barplot occupation
g <- ggplot(data = adultData, aes(x = occupation))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
      coord_flip()
#Barplot education
g <- ggplot(data = adultData, aes(x = `education-num`))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
      coord_flip()


if(input$dist == "Gender classification and income level"){
    g <- ggplot(data = adultData, aes(x = sex))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
                 coord_flip()
  } else if(input$dist == "Race classification and income level"){
    g <- ggplot(data = adultData, aes(x = race))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
                 coord_flip()
  } else if(input$dist == "Occupation classification and Income Level"){
    g <- ggplot(data = adultData, aes(x = occupation))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
                 coord_flip()
  } else {
    g <- ggplot(data = adultData, aes(x = `education-num`))
    g + geom_bar(aes(fill = income), 
                 position = "dodge") + labs(fill = "Income Level") +
                 coord_flip()
  }

```

